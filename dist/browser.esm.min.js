var debug=t=>(...e)=>console.log(..."string"==typeof e[0]?[`[${t}] ${e[0]}`,...e.slice(1)]:e);const log=(t,...e)=>{t&&debug("apitap")(...e)},PROXY_TARGET=Symbol("Proxy target marker");function isWrappable(t){return("object"==typeof t||"function"==typeof t)&&null!==t}function wrapApi(t,e,r,n){if(!isWrappable(t)||PROXY_TARGET in t)return t;return log(n,"wrap %o",t),new Proxy(t,{has:(t,e)=>e===PROXY_TARGET||Reflect.has(t,e),construct:(t,r)=>(log(n,"construct %o with %o",t,r),wrapApi(Reflect.construct(t,r),e,null,n)),get(t,r){if(r===PROXY_TARGET)return t;log(n,"get %o from %o",r,t);const o=("function"==typeof e?e(t):e)||Object.create(null);if(o instanceof Object?o.hasOwnProperty(r):r in o){log(n,"property %o shadowed by injected %o",r,o);const p=Object.getOwnPropertyDescriptor(o,r);let l;return wrapApi(l=p&&"function"==typeof p.get?p.get.call(t):o[r],e,"function"==typeof l?t:null,n)}return wrapApi(Reflect.get(t,r),e,null,n)},apply:(t,r,o)=>(log(n,"call %o with %o as %o",t,o,unwrap(r)),wrapApi(Reflect.apply(t,unwrap(r),o),e,null,n))})}function wrap(t,e=Object.create(null),r=!1){return wrapApi(t,e,null,r)}function unwrap(t){return isWrapped(t)?t[PROXY_TARGET]:t}function isWrapped(t){return isWrappable(t)&&PROXY_TARGET in t}export{wrap,unwrap,isWrapped};
